syntax = "proto3";
package etco_proto;
option go_package = "/proto";

enum ErrorCode {
    EC_OK = 0;
    EC_SERVER_ERROR = 1;
    EC_INVALID_REQUEST = 2;
    EC_INVALID_MERGE = 3;
    EC_BOOTSTRAP_UNSET = 4;
    EC_NOT_FOUND = 5;
    EC_TOKEN_INVALID = 6;
}

enum EsiApp {
    EA_AUTH = 0;
    EA_MARKETS = 1;
    EA_CORPORATION = 2;
    EA_STRUCTURE_INFO = 3;
}

enum MakePurchaseStatus {
    MPS_NONE = 0;
    MPS_SUCCESS = 1;
    MPS_COOLDOWN_LIMIT = 2;
    MPS_MAX_ACTIVE_LIMIT = 3;
    MPS_ITEMS_REJECTED = 4;
    MPS_ITEMS_UNAVAILABLE = 5;
    MPS_ITEMS_REJECTED_AND_UNAVAILABLE = 6;
}

enum CancelPurchaseStatus {
    CPS_SUCCESS = 0;
    CPS_COOLDOWN_LIMIT = 1;
    CPS_NOT_FOUND = 2;
    CPS_COOLDOWN_LIMIT_AND_NOT_FOUND = 3;
    CPS_NOT_ACTIVE = 4;
}

enum ContractStatus {
    CS_UNKNOWN = 0;
    CS_OUTSTANDING = 1;
    CS_IN_PROGRESS = 2;
    CS_FINISHED_ISSUER = 3;
    CS_FINISHED_CONTRACTOR = 4;
    CS_FINISHED = 5;
    CS_CANCELLED = 6;
    CS_REJECTED = 7;
    CS_FAILED = 8;
    CS_DELETED = 9;
    CS_REVERSED = 10;
}

enum ContractAssigneeType {
    CAT_UNKNOWN = 0;
    CAT_CORPORATION = 1;
    CAT_CHARACTER = 2;
    CAT_ALLIANCE = 3;
}

enum AppraisalStatus {
    AS_UNDEFINED = 0;
    AS_CONTRACT = 1;
    AS_PURCHASE_QUEUE = 2;
}

message EmptyRequest {}

message BasicRequest {
    string refresh_token = 1;
}

message ErrorResponse {
    string error = 1; // error message
    ErrorCode code = 2; // error code
}

message NamedTypeId {
    int32 type_id = 1;
    int32 type_str_index = 2;
    int32 category_str_index = 3;
    int32 group_str_index = 4;
    repeated int32 market_group_str_indexes = 5;
}
message BasicItem {
    int32 type_id = 1;
    int64 quantity = 2;
}
message NamedBasicItem {
    NamedTypeId type_id = 1;
    int64 quantity = 2;
}

message ShopLocationInfo {
    LocationInfo location_info = 1;
    double tax_rate = 2; // tax rate (0-1)
}
message LocationInfo {
    int64 location_id = 1;
    int32 location_str_index = 2;
    bool is_structure = 3;
    bool forbidden_structure = 4;
    SystemInfo system_info = 5;
}
message SystemInfo {
    int32 system_id = 1;
    int32 system_str_index = 2;
    int32 region_id = 3;
    int32 region_str_index = 4;
}

message CodeAndLocationId {
    string code = 1; // AppraisalCode
    int64 location_id = 2; // LocationId
}

message BuybackAppraisal {
    bool rejected = 1;
    string code = 2; // AppraisalCode
    int64 time = 3; // time of the appraisal
    repeated BuybackParentItem items = 4;
    string version = 5; // version of the pricing scheme
    int32 character_id = 6; // 0 if anonymous or unauthorized to see
    SystemInfo system_info = 7;
    double price = 8; // sum of []parent.price_total
    double tax = 9;
    double tax_rate = 10; // tax rate (0-1)
    double fee = 11; // sum of item fees
    double fee_per_m3 = 12; // fee per m3
}
message BuybackAppraisalStatus {
    string code = 1;
    Contract contract = 2;
}
message BuybackParentItem {
    NamedTypeId type_id = 1;
    int64 quantity = 2;
    double price_per_unit = 3;
    int32 description_str_index = 4;
    double fee_per_unit = 5;
    repeated BuybackChildItem children = 6;
}
message BuybackChildItem {
    NamedTypeId type_id = 1;
    double quantity_per_parent = 2;
    double price_per_unit = 3;
    int32 description_str_index = 4;
}

message ShopAppraisal {
    bool rejected = 1;
    string code = 2; // AppraisalCode
    int64 time = 3; // time of the appraisal
    repeated ShopItem items = 4;
    string version = 5; // version of the pricing scheme
    int32 character_id = 6; // 0 if anonymous or unauthorized to see
    LocationInfo location_info = 7;
    double price = 8; // sum of []item.price_total
    double tax = 9;
    double tax_rate = 10; // tax rate (0-1)
}
message ShopAppraisalStatus {
    string code = 1;
    Contract contract = 2;
    bool in_purchase_queue = 3;
}
message ShopItem {
    NamedTypeId type_id = 1;
    int64 quantity = 2;
    double price_per_unit = 3;
    int32 description_str_index = 4;
}

message PurchaseQueue {
    repeated string codes = 1;
    LocationInfo location_info = 2;
}

message Contract {
    int32 contract_id = 1;
    ContractStatus status = 2;
    int64 issued = 3;
    int64 expires = 4;
    LocationInfo location_info = 5;
    double price = 6;
    int32 issuer_corp_id = 7;
    int32 issuer_char_id = 8;
    int32 assignee_id = 9;
    ContractAssigneeType assignee_type = 10;
}
message BuybackContractQueueEntry {
    string code = 1; // AppraisalCode
    Contract contract = 2;
    BuybackAppraisal appraisal = 3; // items are empty
}
message ShopContractQueueEntry {
    string code = 1; // AppraisalCode
    Contract contract = 2;
    ShopAppraisal appraisal = 3; // items are empty
}

message CfgTypePricing {
    bool is_buy = 1;
    uint32 percentile = 2;
    uint32 modifier = 3;
    string market = 4; // MarketKey
}
message CfgBuybackTypePricing {
    // at least one of these must be set
    CfgTypePricing pricing = 1;
    uint32 reprocessing_efficiency = 2; // 0 - 100
}
// wrapper for TypePricing
message CfgShopTypePricing {
    CfgTypePricing inner = 1;
}
// wrapper for map<BuybackTypeMapKey, BuybackTypeValue>
message CfgBuybackSystemTypeBundle {
    map<string, CfgBuybackTypePricing> inner = 1;
}
// wrapper for map<ShopTypeMapKey, ShopTypeValue>
message CfgShopLocationTypeBundle {
    map<string, CfgShopTypePricing> inner = 1;
}
message CfgBuybackSystem {
    string bundle_key = 1; // BuybackSystemBundleKey
    double m3_fee = 2; // fee per m3
    double tax_rate = 3; // tax rate (0-1)
}
message CfgShopLocation {
    string bundle_key = 1; // ShopLocationBundleKey
    repeated string banned_flags = 2; // banned asset flags
    double tax_rate = 3; // tax rate (0-1)
}
message CfgMarket {
    string refresh_token = 1; // web token
    int64 location_id = 2;
    bool is_structure = 3;
}
message CfgConstData {
    int32 purchase_max_active = 1;
    int32 make_purchase_cooldown = 2;
    int32 cancel_purchase_cooldown = 3;
    string corporation_web_refresh_token = 4;
    string structure_info_web_refresh_token = 5;
    string discord_channel = 6;
    bool buyback_contract_notifications = 7;
    bool shop_contract_notifications = 8;
    bool purchase_notifications = 9;
}
// list of valid IDs for authentication
message CfgAuthList {
    // authentication is checked in this exact order, stopping on first match
    repeated int32 banned_character_ids = 1; // denied
    repeated int32 permit_character_ids = 2; // allowed
    repeated int32 banned_corporation_ids = 3; // denied
    repeated int32 permit_corporation_ids = 4; // allowed
    repeated int32 permit_alliance_ids = 5; // allowed
    // denied
}

// // Static Endpoints

message TypesResponse {
    repeated int32 types = 1;
    ErrorResponse error = 2;
}

message NamedTypesRequest {
    repeated int32 types = 1;
}
message NamedTypesResponse {
    repeated NamedTypeId types = 1; // same order as request
    repeated string strs = 2;
    ErrorResponse error = 3; // any invalid type_ids
}

message SystemsRequest {
    repeated int32 systems = 1;
}
message SystemsResponse {
    repeated SystemInfo systems = 1; // same order as request
    repeated string strs = 2;
    ErrorResponse error = 3;
}

// // Anonymous Endpoints

message AllShopLocationsResponse {
    repeated ShopLocationInfo locations = 1;
    repeated string strs = 2;
    ErrorResponse error = 3;
}

message LocationsRequest {
    repeated int64 locations = 1;
}
message LocationsResponse {
    repeated LocationInfo locations = 1; // same order as request
    repeated string strs = 2;
    ErrorResponse error = 3;
}

message ParseRequest {
    string text = 1;
}
message ParseResponse {
    repeated NamedBasicItem known_items = 1;
    repeated NamedBasicItem unknown_items = 2;
    repeated string strs = 3;
    ErrorResponse error = 4;
}

message LoginRequest {
    string access_code = 1; // esi sso code
    EsiApp app = 2;
}
message LoginResponse {
    string refresh_token = 1;
    int32 character_id = 2;
    bool admin = 3;
    ErrorResponse error = 4;
}

message TokenInfoRequest {
    string refresh_token = 1;
    EsiApp app = 2;
}
message TokenInfoResponse {
    int32 character_id = 1;
    bool admin = 2;
    ErrorResponse error = 3;
}

message EntityInfoRequest {
    int32 entity_id = 1;
}
message CharacterInfoResponse {
    int32 character_id = 1;
    int32 corporation_id = 2;
    int32 alliance_id = 3; // 0 = null
    string name = 4;
    ErrorResponse error = 5;
}
message CorporationInfoResponse {
    int32 corporation_id = 1;
    int32 alliance_id = 2; // 0 = null
    string name = 3;
    string ticker = 4;
    ErrorResponse error = 5;
}
message AllianceInfoResponse {
    int32 alliance_id = 1;
    string name = 2;
    string ticker = 3;
    ErrorResponse error = 4;
}

message NewAppraisalRequest { // won't include a code + won't be retrievable later
    int64 territory_id = 1; // SystemId / LocationId
    repeated BasicItem items = 2;
}

// // Admin Endpoints

message BuybackContractQueueResponse {
    repeated BuybackContractQueueEntry queue = 1;
    repeated string strs = 2;
    bool authorized = 3;
    ErrorResponse error = 4;
}

message ShopContractQueueResponse {
    repeated ShopContractQueueEntry queue = 1;
    repeated string strs = 2;
    bool authorized = 3;
    ErrorResponse error = 4;
}

message PurchaseQueueResponse {
    map<int64, PurchaseQueue> queue = 1;
    repeated string strs = 2;
    bool authorized = 3;
    ErrorResponse error = 4;
}

message LocationPurchaseQueueRequest {
    int64 location_id = 1; // LocationId
    string refresh_token = 2;
}
message LocationPurchaseQueueResponse {
    PurchaseQueue queue = 1;
    repeated string strs = 2;
    bool authorized = 3;
    ErrorResponse error = 4;
}

message DeletePurchasesRequest {
    repeated CodeAndLocationId entries = 1; // AppraisalCode
    string refresh_token = 2;
}
message DeletePurchasesResponse {
    bool authorized = 1; // true if admin
    ErrorResponse error = 2;
}

// // User Endpoints

message SaveAppraisalRequest { // will include a code + will be retrievable later
    int64 territory_id = 1; // SystemId / LocationId
    repeated BasicItem items = 2;
    string refresh_token = 3; // optional
}

message BuybackAppraisalResponse {
    BuybackAppraisal appraisal = 1;
    repeated string strs = 2;
    bool authorized = 3; // true = not saving OR user OR admin OR saving as anonymous
    ErrorResponse error = 4;
}
message ShopAppraisalResponse {
    MakePurchaseStatus status = 1; // always success if not saving
    ShopAppraisal appraisal = 2;
    repeated string strs = 3;
    bool authorized = 4; // true = not saving OR user OR admin OR saving as anonymous
    ErrorResponse error = 5;
}

message ShopInventoryRequest {
    int64 location_id = 1; // LocationId
    string refresh_token = 2;
}
message ShopInventoryResponse {
    repeated ShopItem items = 1;
    LocationInfo location_info = 2;
    repeated string strs = 3;
    bool authorized = 4;
    ErrorResponse error = 5;
}

message UserDataRequest {
    int32 character_id = 1;
    string refresh_token = 2;
}
message UserTimePurchaseResponse {
    int64 time = 1;
    bool authorized = 2; // true = user OR admin
    ErrorResponse error = 3;
}
message UserAppraisalCodesResponse {
    repeated string codes = 1; // AppraisalCodes
    bool authorized = 2; // true = user OR admin
    ErrorResponse error = 3;
}

message CancelPurchaseRequest {
    string code = 1;
    int64 location_id = 2;
    string refresh_token = 3;
}
message CancelPurchaseResponse {
    CancelPurchaseStatus status = 1;
    bool authorized = 2; // true = user OR admin
    ErrorResponse error = 3;
}

message StatusAppraisalRequest {
    string code = 1; // AppraisalCode
    bool include_items = 2;
    string refresh_token = 3;
}
message StatusAppraisalResponse {
    AppraisalStatus status = 1;
    Contract contract = 2; // null = status != AS_HAS_CONTRACT
    repeated NamedBasicItem contract_items = 3; // empty = status != AS_HAS_CONTRACT || !include_items
    repeated string strs = 4;
    bool authorized = 5; // true = appraisal-creator OR admin
    ErrorResponse error = 6;
}

// // Dynamic Endpoints - Auth is optional, behavior depends on auth

message GetAppraisalRequest {
    string code = 1; // AppraisalCode
    bool include_items = 2;
    string refresh_token = 3; // Optional
}
message GetBuybackAppraisalResponse {
    BuybackAppraisal appraisal = 1; // characterId == 0 if anonymous-appraisal || (!admin && !appraisal-creator)
    bool anonymous = 2; // true = anonymous-appraisal
    repeated string strs = 3;
    ErrorResponse error = 4; // code not exists
}
message GetShopAppraisalResponse {
    ShopAppraisal appraisal = 1; // characterId == 0 if anonymous-appraisal || (!admin && !appraisal-creator)
    bool anonymous = 2; // true = anonymous-appraisal
    repeated string strs = 3;
    ErrorResponse error = 4; // code not exists
}

// // Cfg Endpoints

message CfgUpdateResponse {
    bool modified = 1;
    bool authorized = 2;
    ErrorResponse error = 3;
}

message CfgGetAuthListResponse {
    CfgAuthList auth_list = 1;
    bool authorized = 2;
    ErrorResponse error = 3;
}
message CfgSetAuthListRequest {
    CfgAuthList auth_list = 1;
    string refresh_token = 2;
}

message CfgGetConstDataResponse {
    CfgConstData const_data = 1;
    bool authorized = 2;
    ErrorResponse error = 3;
}
message CfgSetConstDataRequest {
    CfgConstData const_data = 1;
    string refresh_token = 2;
}

message CfgGetBuybackSystemTypeMapsBuilderResponse {
    map<int32, CfgBuybackSystemTypeBundle> builder = 1;
    bool authorized = 2;
    ErrorResponse error = 3;
}
message CfgMergeBuybackSystemTypeMapsBuilderRequest {
    // the program itself converts this to multiple map<TypeId, BuybackTypeMap>
    map<int32, CfgBuybackSystemTypeBundle> builder = 1;
    string refresh_token = 2;
}

message CfgGetShopLocationTypeMapsBuilderResponse {
    map<int32, CfgShopLocationTypeBundle> builder = 1;
    bool authorized = 2;
    ErrorResponse error = 3;
}
message CfgMergeShopLocationTypeMapsBuilderRequest {
    // the program itself converts this to multiple map<TypeId, ShopTypeMap>
    map<int32, CfgShopLocationTypeBundle> builder = 1;
    string refresh_token = 2;
}

message CfgGetBuybackSystemsResponse {
    map<int32, CfgBuybackSystem> systems = 1;
    bool authorized = 4;
    ErrorResponse error = 5;
}
message CfgMergeBuybackSystemsRequest {
    map<int32, CfgBuybackSystem> systems = 1;
    string refresh_token = 2;
}

message CfgGetShopLocationsResponse {
    map<int64, CfgShopLocation> locations = 1;
    bool authorized = 4;
    ErrorResponse error = 5;
}
message CfgMergeShopLocationsRequest {
    map<int64, CfgShopLocation> locations = 1;
    string refresh_token = 2;
}

message CfgGetMarketsResponse {
    map<string, CfgMarket> markets = 1;
    bool authorized = 4;
    ErrorResponse error = 5;
}
message CfgMergeMarketsRequest {
    map<string, CfgMarket> markets = 1;
    string refresh_token = 2;
}

message CfgGetBuybackBundleKeysResponse {
    repeated string bundle_keys = 1; // BuybackSystemBundleKey
    bool authorized = 2;
    ErrorResponse error = 3;
}

message CfgGetShopBundleKeysResponse {
    repeated string bundle_keys = 1; // ShopLocationBundleKey
    bool authorized = 2;
    ErrorResponse error = 3;
}

message CfgGetMarketNamesResponse {
    repeated string market_names = 1;
    bool authorized = 2;
    ErrorResponse error = 3;
}

service EveTradingCo {
    // // (Anonymous) (Static)

    // every published type with a market group
    rpc AllTypes(EmptyRequest) returns (TypesResponse);
    rpc AllNamedTypes(EmptyRequest) returns (NamedTypesResponse);
    // requested published types with a market group
    rpc NamedTypes(NamedTypesRequest) returns (NamedTypesResponse);
    // every available buyback system
    rpc AllBuybackSystems(EmptyRequest) returns (SystemsResponse);
    // every system
    rpc AllSystems(EmptyRequest) returns (SystemsResponse);
    // requested systems
    rpc Systems(SystemsRequest) returns (SystemsResponse);

    // // (Anonymous)

    // every available shop location
    rpc AllShopLocations(EmptyRequest) returns (AllShopLocationsResponse);
    // requested locations
    rpc Locations(LocationsRequest) returns (LocationsResponse);
    // logs into the requested app (users will only ever use the Auth app)
    rpc Login(LoginRequest) returns (LoginResponse);
    // parses an input string into a list of named basic items
    rpc Parse(ParseRequest) returns (ParseResponse);
    // retrieves information about the given entity
    rpc CharacterInfo(EntityInfoRequest) returns (CharacterInfoResponse);
    rpc CorporationInfo(EntityInfoRequest) returns (CorporationInfoResponse);
    rpc AllianceInfo(EntityInfoRequest) returns (AllianceInfoResponse);
    // creates a new appraisal that is not saved and will not be retrievable later
    rpc NewBuybackAppraisal(NewAppraisalRequest) returns (BuybackAppraisalResponse);
    rpc NewShopAppraisal(NewAppraisalRequest) returns (ShopAppraisalResponse);
    // retrieves info about the character associated with the given token + app
    rpc TokenInfo(TokenInfoRequest) returns (TokenInfoResponse);

    // // (Admin)

    // retrieves the contract queue (appraisal codes with an extant contract)
    rpc BuybackContractQueue(BasicRequest) returns (BuybackContractQueueResponse);
    rpc ShopContractQueue(BasicRequest) returns (ShopContractQueueResponse);
    // retrieves the purchase queue (appraisal codes in the purchase queue with no contract)
    rpc PurchaseQueue(BasicRequest) returns (PurchaseQueueResponse);
    // retrieves the purchase queue for the specified location
    rpc LocationPurchaseQueue(LocationPurchaseQueueRequest) returns (LocationPurchaseQueueResponse);
    // deletes the specified codes from the purchase queue
    rpc DeletePurchases(DeletePurchasesRequest) returns (DeletePurchasesResponse);

    // // (User+Creator)

    // cancels an existing purchase order
    // admin should use DeletePurchases instead
    rpc CancelPurchase(CancelPurchaseRequest) returns (CancelPurchaseResponse);

    // // (User+SameCharacter) or (Admin)

    // retrieves the appraisal codes for the given character
    rpc UserBuybackAppraisalCodes(UserDataRequest) returns (UserAppraisalCodesResponse);
    rpc UserShopAppraisalCodes(UserDataRequest) returns (UserAppraisalCodesResponse);
    // retrieves the time of the last action for the given character
    rpc UserMadePurchase(UserDataRequest) returns (UserTimePurchaseResponse);
    rpc UserCancelledPurchase(UserDataRequest) returns (UserTimePurchaseResponse);

    // // (User) or (Admin) or (Anonymous)
    
    // creates a new appraisal that is saved and will be retrievable later
    rpc SaveBuybackAppraisal(SaveAppraisalRequest) returns (BuybackAppraisalResponse);
    rpc SaveShopAppraisal(SaveAppraisalRequest) returns (ShopAppraisalResponse);

    // // (User) or (Admin)

    // retrieves the available purchasable items for the given location
    rpc ShopInventory(ShopInventoryRequest) returns (ShopInventoryResponse);

    // // (Creator) or (Admin)

    // retrieves the current status of the appraisal
    rpc StatusBuybackAppraisal(StatusAppraisalRequest) returns (StatusAppraisalResponse);
    rpc StatusShopAppraisal(StatusAppraisalRequest) returns (StatusAppraisalResponse);

    // // (Anonymous) or (Creator) or (Admin)
    // // If (Creator) or (Admin), returns character_id

    // retrieves the appraisal for the given code
    rpc GetBuybackAppraisal(GetAppraisalRequest) returns (GetBuybackAppraisalResponse);
    rpc GetShopAppraisal(GetAppraisalRequest) returns (GetShopAppraisalResponse);

    // // (Cfg) (Admin)

    // Get the requested config data
    rpc CfgGetUserAuthList(BasicRequest) returns (CfgGetAuthListResponse);
    rpc CfgGetAdminAuthList(BasicRequest) returns (CfgGetAuthListResponse);
    rpc CfgGetBuybackSystemTypeMapsBuilder(BasicRequest) returns (CfgGetBuybackSystemTypeMapsBuilderResponse);
    rpc CfgGetShopLocationTypeMapsBuilder(BasicRequest) returns (CfgGetShopLocationTypeMapsBuilderResponse);
    rpc CfgGetBuybackSystems(BasicRequest) returns (CfgGetBuybackSystemsResponse);
    rpc CfgGetShopLocations(BasicRequest) returns (CfgGetShopLocationsResponse);
    rpc CfgGetMarkets(BasicRequest) returns (CfgGetMarketsResponse);
    rpc CfgGetMarketNames(BasicRequest) returns (CfgGetMarketNamesResponse);
    rpc CfgGetBuybackBundleKeys(BasicRequest) returns (CfgGetBuybackBundleKeysResponse);
    rpc CfgGetShopBundleKeys(BasicRequest) returns (CfgGetShopBundleKeysResponse);
    rpc CfgGetConstData(BasicRequest) returns (CfgGetConstDataResponse);
    // Replace existing config data with the given config data
    rpc CfgSetUserAuthList(CfgSetAuthListRequest) returns (CfgUpdateResponse);
    rpc CfgSetAdminAuthList(CfgSetAuthListRequest) returns (CfgUpdateResponse);
    rpc CfgSetConstData(CfgSetConstDataRequest) returns (CfgUpdateResponse);
    // Merge the given config data into the existing config data
    rpc CfgMergeBuybackSystemTypeMapsBuilder(CfgMergeBuybackSystemTypeMapsBuilderRequest) returns (CfgUpdateResponse);
    rpc CfgMergeShopLocationTypeMapsBuilder(CfgMergeShopLocationTypeMapsBuilderRequest) returns (CfgUpdateResponse);
    rpc CfgMergeBuybackSystems(CfgMergeBuybackSystemsRequest) returns (CfgUpdateResponse);
    rpc CfgMergeShopLocations(CfgMergeShopLocationsRequest) returns (CfgUpdateResponse);
    rpc CfgMergeMarkets(CfgMergeMarketsRequest) returns (CfgUpdateResponse);
}
